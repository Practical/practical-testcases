def op1() -> U8 {
    23
}

def op2() -> S8 {
    17
}

def main() -> S32 {

    // Binary plus
    def signedPlus : U8 = expect!S32(35+4);
    //def err1_1 : U8 = expect!S32(127+127+5);
    def unsignedPlus : S8 = expect!U8(35+4);
    //def err1_2 : S8 = expect!U8(125+4);
    def unsignedPlusOverflow : S8 = expect!U8(254+9+120);
    //def overflowError2 : S8 = expect!U8(254+9+121);

    // Binary minus
    def unsignedMinus : U8 = expect!U16(355 - 100);
    //def err2_1 : U8 = expect!U16(355 - 99);
    def unsignedMinusOverflow : U8 = expect!U16(100-355-65026);
    //def unsignedMinusOverflow_err : U8 = expect!U16(100-355-65025);
    def signedMinus : U8 = expect!S16( 0 - 100 - (0-355) );
    // def signedMinusOverflow : U8 = expect!S16( 0 - 100 - (0-356) );

    // Binary multiply
    def unsignedMultiply : U8 = expect!U16( 16 * 15 + 15 );
    // def unsignedMultiplyOverflow : U8 = expect!U16( 16 * 15 + 16 );
    def signedMultiply : U8 = expect!S16( 16 * 15 + 15 );

    347 + op1() + op2()
}

def average( a : U8, b : U8 ) -> U8 {
    expect!U16( (a+b)/2 )
}

def noVrpBinaryOps( a: U8, b: U8 ) -> Bool {
    def eq : Bool = a == b;
    def ne : Bool = a != b;
    def lt : Bool = a < b;
    def le : Bool = a <= b;
    def gt : Bool = a > b;
    def ge : Bool = a >= b;

    lt
}

def noVrpBinaryOps( a: S8, b: S8 ) -> Bool {
    def eq : Bool = a == b;
    def ne : Bool = a != b;
    def lt : Bool = a < b;
    def le : Bool = a <= b;
    def gt : Bool = a > b;
    def ge : Bool = a >= b;

    lt
}
